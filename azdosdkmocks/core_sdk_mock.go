// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/microsoft/azure-devops-go-api/azuredevops/core (interfaces: Client)

// Package azdosdkmocks is a generated GoMock package.
package azdosdkmocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	core "github.com/microsoft/azure-devops-go-api/azuredevops/core"
	operations "github.com/microsoft/azure-devops-go-api/azuredevops/operations"
	webapi "github.com/microsoft/azure-devops-go-api/azuredevops/webapi"
	reflect "reflect"
)

// MockCoreClient is a mock of Client interface
type MockCoreClient struct {
	ctrl     *gomock.Controller
	recorder *MockCoreClientMockRecorder
}

// MockCoreClientMockRecorder is the mock recorder for MockCoreClient
type MockCoreClientMockRecorder struct {
	mock *MockCoreClient
}

// NewMockCoreClient creates a new mock instance
func NewMockCoreClient(ctrl *gomock.Controller) *MockCoreClient {
	mock := &MockCoreClient{ctrl: ctrl}
	mock.recorder = &MockCoreClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCoreClient) EXPECT() *MockCoreClientMockRecorder {
	return m.recorder
}

// CreateConnectedService mocks base method
func (m *MockCoreClient) CreateConnectedService(arg0 context.Context, arg1 core.CreateConnectedServiceArgs) (*core.WebApiConnectedService, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConnectedService", arg0, arg1)
	ret0, _ := ret[0].(*core.WebApiConnectedService)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConnectedService indicates an expected call of CreateConnectedService
func (mr *MockCoreClientMockRecorder) CreateConnectedService(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConnectedService", reflect.TypeOf((*MockCoreClient)(nil).CreateConnectedService), arg0, arg1)
}

// CreateOrUpdateProxy mocks base method
func (m *MockCoreClient) CreateOrUpdateProxy(arg0 context.Context, arg1 core.CreateOrUpdateProxyArgs) (*core.Proxy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateProxy", arg0, arg1)
	ret0, _ := ret[0].(*core.Proxy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdateProxy indicates an expected call of CreateOrUpdateProxy
func (mr *MockCoreClientMockRecorder) CreateOrUpdateProxy(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateProxy", reflect.TypeOf((*MockCoreClient)(nil).CreateOrUpdateProxy), arg0, arg1)
}

// CreateTeam mocks base method
func (m *MockCoreClient) CreateTeam(arg0 context.Context, arg1 core.CreateTeamArgs) (*core.WebApiTeam, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTeam", arg0, arg1)
	ret0, _ := ret[0].(*core.WebApiTeam)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTeam indicates an expected call of CreateTeam
func (mr *MockCoreClientMockRecorder) CreateTeam(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTeam", reflect.TypeOf((*MockCoreClient)(nil).CreateTeam), arg0, arg1)
}

// DeleteProxy mocks base method
func (m *MockCoreClient) DeleteProxy(arg0 context.Context, arg1 core.DeleteProxyArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProxy", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProxy indicates an expected call of DeleteProxy
func (mr *MockCoreClientMockRecorder) DeleteProxy(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProxy", reflect.TypeOf((*MockCoreClient)(nil).DeleteProxy), arg0, arg1)
}

// DeleteTeam mocks base method
func (m *MockCoreClient) DeleteTeam(arg0 context.Context, arg1 core.DeleteTeamArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTeam", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTeam indicates an expected call of DeleteTeam
func (mr *MockCoreClientMockRecorder) DeleteTeam(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTeam", reflect.TypeOf((*MockCoreClient)(nil).DeleteTeam), arg0, arg1)
}

// GetAllTeams mocks base method
func (m *MockCoreClient) GetAllTeams(arg0 context.Context, arg1 core.GetAllTeamsArgs) (*[]core.WebApiTeam, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTeams", arg0, arg1)
	ret0, _ := ret[0].(*[]core.WebApiTeam)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTeams indicates an expected call of GetAllTeams
func (mr *MockCoreClientMockRecorder) GetAllTeams(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTeams", reflect.TypeOf((*MockCoreClient)(nil).GetAllTeams), arg0, arg1)
}

// GetConnectedServiceDetails mocks base method
func (m *MockCoreClient) GetConnectedServiceDetails(arg0 context.Context, arg1 core.GetConnectedServiceDetailsArgs) (*core.WebApiConnectedServiceDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConnectedServiceDetails", arg0, arg1)
	ret0, _ := ret[0].(*core.WebApiConnectedServiceDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConnectedServiceDetails indicates an expected call of GetConnectedServiceDetails
func (mr *MockCoreClientMockRecorder) GetConnectedServiceDetails(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnectedServiceDetails", reflect.TypeOf((*MockCoreClient)(nil).GetConnectedServiceDetails), arg0, arg1)
}

// GetConnectedServices mocks base method
func (m *MockCoreClient) GetConnectedServices(arg0 context.Context, arg1 core.GetConnectedServicesArgs) (*[]core.WebApiConnectedService, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConnectedServices", arg0, arg1)
	ret0, _ := ret[0].(*[]core.WebApiConnectedService)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConnectedServices indicates an expected call of GetConnectedServices
func (mr *MockCoreClientMockRecorder) GetConnectedServices(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnectedServices", reflect.TypeOf((*MockCoreClient)(nil).GetConnectedServices), arg0, arg1)
}

// GetProcessById mocks base method
func (m *MockCoreClient) GetProcessById(arg0 context.Context, arg1 core.GetProcessByIdArgs) (*core.Process, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProcessById", arg0, arg1)
	ret0, _ := ret[0].(*core.Process)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProcessById indicates an expected call of GetProcessById
func (mr *MockCoreClientMockRecorder) GetProcessById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProcessById", reflect.TypeOf((*MockCoreClient)(nil).GetProcessById), arg0, arg1)
}

// GetProcesses mocks base method
func (m *MockCoreClient) GetProcesses(arg0 context.Context, arg1 core.GetProcessesArgs) (*[]core.Process, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProcesses", arg0, arg1)
	ret0, _ := ret[0].(*[]core.Process)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProcesses indicates an expected call of GetProcesses
func (mr *MockCoreClientMockRecorder) GetProcesses(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProcesses", reflect.TypeOf((*MockCoreClient)(nil).GetProcesses), arg0, arg1)
}

// GetProject mocks base method
func (m *MockCoreClient) GetProject(arg0 context.Context, arg1 core.GetProjectArgs) (*core.TeamProject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProject", arg0, arg1)
	ret0, _ := ret[0].(*core.TeamProject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProject indicates an expected call of GetProject
func (mr *MockCoreClientMockRecorder) GetProject(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProject", reflect.TypeOf((*MockCoreClient)(nil).GetProject), arg0, arg1)
}

// GetProjectCollection mocks base method
func (m *MockCoreClient) GetProjectCollection(arg0 context.Context, arg1 core.GetProjectCollectionArgs) (*core.TeamProjectCollection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectCollection", arg0, arg1)
	ret0, _ := ret[0].(*core.TeamProjectCollection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectCollection indicates an expected call of GetProjectCollection
func (mr *MockCoreClientMockRecorder) GetProjectCollection(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectCollection", reflect.TypeOf((*MockCoreClient)(nil).GetProjectCollection), arg0, arg1)
}

// GetProjectCollections mocks base method
func (m *MockCoreClient) GetProjectCollections(arg0 context.Context, arg1 core.GetProjectCollectionsArgs) (*[]core.TeamProjectCollectionReference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectCollections", arg0, arg1)
	ret0, _ := ret[0].(*[]core.TeamProjectCollectionReference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectCollections indicates an expected call of GetProjectCollections
func (mr *MockCoreClientMockRecorder) GetProjectCollections(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectCollections", reflect.TypeOf((*MockCoreClient)(nil).GetProjectCollections), arg0, arg1)
}

// GetProjectProperties mocks base method
func (m *MockCoreClient) GetProjectProperties(arg0 context.Context, arg1 core.GetProjectPropertiesArgs) (*[]core.ProjectProperty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectProperties", arg0, arg1)
	ret0, _ := ret[0].(*[]core.ProjectProperty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectProperties indicates an expected call of GetProjectProperties
func (mr *MockCoreClientMockRecorder) GetProjectProperties(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectProperties", reflect.TypeOf((*MockCoreClient)(nil).GetProjectProperties), arg0, arg1)
}

// GetProjects mocks base method
func (m *MockCoreClient) GetProjects(arg0 context.Context, arg1 core.GetProjectsArgs) (*core.GetProjectsResponseValue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjects", arg0, arg1)
	ret0, _ := ret[0].(*core.GetProjectsResponseValue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjects indicates an expected call of GetProjects
func (mr *MockCoreClientMockRecorder) GetProjects(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjects", reflect.TypeOf((*MockCoreClient)(nil).GetProjects), arg0, arg1)
}

// GetProxies mocks base method
func (m *MockCoreClient) GetProxies(arg0 context.Context, arg1 core.GetProxiesArgs) (*[]core.Proxy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProxies", arg0, arg1)
	ret0, _ := ret[0].(*[]core.Proxy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProxies indicates an expected call of GetProxies
func (mr *MockCoreClientMockRecorder) GetProxies(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProxies", reflect.TypeOf((*MockCoreClient)(nil).GetProxies), arg0, arg1)
}

// GetTeam mocks base method
func (m *MockCoreClient) GetTeam(arg0 context.Context, arg1 core.GetTeamArgs) (*core.WebApiTeam, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeam", arg0, arg1)
	ret0, _ := ret[0].(*core.WebApiTeam)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTeam indicates an expected call of GetTeam
func (mr *MockCoreClientMockRecorder) GetTeam(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeam", reflect.TypeOf((*MockCoreClient)(nil).GetTeam), arg0, arg1)
}

// GetTeamMembersWithExtendedProperties mocks base method
func (m *MockCoreClient) GetTeamMembersWithExtendedProperties(arg0 context.Context, arg1 core.GetTeamMembersWithExtendedPropertiesArgs) (*[]webapi.TeamMember, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeamMembersWithExtendedProperties", arg0, arg1)
	ret0, _ := ret[0].(*[]webapi.TeamMember)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTeamMembersWithExtendedProperties indicates an expected call of GetTeamMembersWithExtendedProperties
func (mr *MockCoreClientMockRecorder) GetTeamMembersWithExtendedProperties(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeamMembersWithExtendedProperties", reflect.TypeOf((*MockCoreClient)(nil).GetTeamMembersWithExtendedProperties), arg0, arg1)
}

// GetTeams mocks base method
func (m *MockCoreClient) GetTeams(arg0 context.Context, arg1 core.GetTeamsArgs) (*[]core.WebApiTeam, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeams", arg0, arg1)
	ret0, _ := ret[0].(*[]core.WebApiTeam)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTeams indicates an expected call of GetTeams
func (mr *MockCoreClientMockRecorder) GetTeams(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeams", reflect.TypeOf((*MockCoreClient)(nil).GetTeams), arg0, arg1)
}

// QueueCreateProject mocks base method
func (m *MockCoreClient) QueueCreateProject(arg0 context.Context, arg1 core.QueueCreateProjectArgs) (*operations.OperationReference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueCreateProject", arg0, arg1)
	ret0, _ := ret[0].(*operations.OperationReference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueueCreateProject indicates an expected call of QueueCreateProject
func (mr *MockCoreClientMockRecorder) QueueCreateProject(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueCreateProject", reflect.TypeOf((*MockCoreClient)(nil).QueueCreateProject), arg0, arg1)
}

// QueueDeleteProject mocks base method
func (m *MockCoreClient) QueueDeleteProject(arg0 context.Context, arg1 core.QueueDeleteProjectArgs) (*operations.OperationReference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueDeleteProject", arg0, arg1)
	ret0, _ := ret[0].(*operations.OperationReference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueueDeleteProject indicates an expected call of QueueDeleteProject
func (mr *MockCoreClientMockRecorder) QueueDeleteProject(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueDeleteProject", reflect.TypeOf((*MockCoreClient)(nil).QueueDeleteProject), arg0, arg1)
}

// RemoveProjectAvatar mocks base method
func (m *MockCoreClient) RemoveProjectAvatar(arg0 context.Context, arg1 core.RemoveProjectAvatarArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveProjectAvatar", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveProjectAvatar indicates an expected call of RemoveProjectAvatar
func (mr *MockCoreClientMockRecorder) RemoveProjectAvatar(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveProjectAvatar", reflect.TypeOf((*MockCoreClient)(nil).RemoveProjectAvatar), arg0, arg1)
}

// SetProjectAvatar mocks base method
func (m *MockCoreClient) SetProjectAvatar(arg0 context.Context, arg1 core.SetProjectAvatarArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetProjectAvatar", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetProjectAvatar indicates an expected call of SetProjectAvatar
func (mr *MockCoreClientMockRecorder) SetProjectAvatar(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetProjectAvatar", reflect.TypeOf((*MockCoreClient)(nil).SetProjectAvatar), arg0, arg1)
}

// SetProjectProperties mocks base method
func (m *MockCoreClient) SetProjectProperties(arg0 context.Context, arg1 core.SetProjectPropertiesArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetProjectProperties", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetProjectProperties indicates an expected call of SetProjectProperties
func (mr *MockCoreClientMockRecorder) SetProjectProperties(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetProjectProperties", reflect.TypeOf((*MockCoreClient)(nil).SetProjectProperties), arg0, arg1)
}

// UpdateProject mocks base method
func (m *MockCoreClient) UpdateProject(arg0 context.Context, arg1 core.UpdateProjectArgs) (*operations.OperationReference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProject", arg0, arg1)
	ret0, _ := ret[0].(*operations.OperationReference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProject indicates an expected call of UpdateProject
func (mr *MockCoreClientMockRecorder) UpdateProject(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProject", reflect.TypeOf((*MockCoreClient)(nil).UpdateProject), arg0, arg1)
}

// UpdateTeam mocks base method
func (m *MockCoreClient) UpdateTeam(arg0 context.Context, arg1 core.UpdateTeamArgs) (*core.WebApiTeam, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTeam", arg0, arg1)
	ret0, _ := ret[0].(*core.WebApiTeam)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTeam indicates an expected call of UpdateTeam
func (mr *MockCoreClientMockRecorder) UpdateTeam(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTeam", reflect.TypeOf((*MockCoreClient)(nil).UpdateTeam), arg0, arg1)
}
