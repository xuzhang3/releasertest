// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/microsoft/azure-devops-go-api/azuredevops/workitemtracking (interfaces: Client)

// Package azdosdkmocks is a generated GoMock package.
package azdosdkmocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	webapi "github.com/microsoft/azure-devops-go-api/azuredevops/webapi"
	workitemtracking "github.com/microsoft/azure-devops-go-api/azuredevops/workitemtracking"
	io "io"
	reflect "reflect"
)

// MockWorkitemtrackingClient is a mock of Client interface
type MockWorkitemtrackingClient struct {
	ctrl     *gomock.Controller
	recorder *MockWorkitemtrackingClientMockRecorder
}

// MockWorkitemtrackingClientMockRecorder is the mock recorder for MockWorkitemtrackingClient
type MockWorkitemtrackingClientMockRecorder struct {
	mock *MockWorkitemtrackingClient
}

// NewMockWorkitemtrackingClient creates a new mock instance
func NewMockWorkitemtrackingClient(ctrl *gomock.Controller) *MockWorkitemtrackingClient {
	mock := &MockWorkitemtrackingClient{ctrl: ctrl}
	mock.recorder = &MockWorkitemtrackingClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWorkitemtrackingClient) EXPECT() *MockWorkitemtrackingClientMockRecorder {
	return m.recorder
}

// AddComment mocks base method
func (m *MockWorkitemtrackingClient) AddComment(arg0 context.Context, arg1 workitemtracking.AddCommentArgs) (*workitemtracking.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddComment", arg0, arg1)
	ret0, _ := ret[0].(*workitemtracking.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddComment indicates an expected call of AddComment
func (mr *MockWorkitemtrackingClientMockRecorder) AddComment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddComment", reflect.TypeOf((*MockWorkitemtrackingClient)(nil).AddComment), arg0, arg1)
}

// CreateAttachment mocks base method
func (m *MockWorkitemtrackingClient) CreateAttachment(arg0 context.Context, arg1 workitemtracking.CreateAttachmentArgs) (*workitemtracking.AttachmentReference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAttachment", arg0, arg1)
	ret0, _ := ret[0].(*workitemtracking.AttachmentReference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAttachment indicates an expected call of CreateAttachment
func (mr *MockWorkitemtrackingClientMockRecorder) CreateAttachment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAttachment", reflect.TypeOf((*MockWorkitemtrackingClient)(nil).CreateAttachment), arg0, arg1)
}

// CreateCommentReaction mocks base method
func (m *MockWorkitemtrackingClient) CreateCommentReaction(arg0 context.Context, arg1 workitemtracking.CreateCommentReactionArgs) (*workitemtracking.CommentReaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCommentReaction", arg0, arg1)
	ret0, _ := ret[0].(*workitemtracking.CommentReaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCommentReaction indicates an expected call of CreateCommentReaction
func (mr *MockWorkitemtrackingClientMockRecorder) CreateCommentReaction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCommentReaction", reflect.TypeOf((*MockWorkitemtrackingClient)(nil).CreateCommentReaction), arg0, arg1)
}

// CreateField mocks base method
func (m *MockWorkitemtrackingClient) CreateField(arg0 context.Context, arg1 workitemtracking.CreateFieldArgs) (*workitemtracking.WorkItemField, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateField", arg0, arg1)
	ret0, _ := ret[0].(*workitemtracking.WorkItemField)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateField indicates an expected call of CreateField
func (mr *MockWorkitemtrackingClientMockRecorder) CreateField(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateField", reflect.TypeOf((*MockWorkitemtrackingClient)(nil).CreateField), arg0, arg1)
}

// CreateOrUpdateClassificationNode mocks base method
func (m *MockWorkitemtrackingClient) CreateOrUpdateClassificationNode(arg0 context.Context, arg1 workitemtracking.CreateOrUpdateClassificationNodeArgs) (*workitemtracking.WorkItemClassificationNode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateClassificationNode", arg0, arg1)
	ret0, _ := ret[0].(*workitemtracking.WorkItemClassificationNode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdateClassificationNode indicates an expected call of CreateOrUpdateClassificationNode
func (mr *MockWorkitemtrackingClientMockRecorder) CreateOrUpdateClassificationNode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateClassificationNode", reflect.TypeOf((*MockWorkitemtrackingClient)(nil).CreateOrUpdateClassificationNode), arg0, arg1)
}

// CreateQuery mocks base method
func (m *MockWorkitemtrackingClient) CreateQuery(arg0 context.Context, arg1 workitemtracking.CreateQueryArgs) (*workitemtracking.QueryHierarchyItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateQuery", arg0, arg1)
	ret0, _ := ret[0].(*workitemtracking.QueryHierarchyItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateQuery indicates an expected call of CreateQuery
func (mr *MockWorkitemtrackingClientMockRecorder) CreateQuery(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateQuery", reflect.TypeOf((*MockWorkitemtrackingClient)(nil).CreateQuery), arg0, arg1)
}

// CreateTemplate mocks base method
func (m *MockWorkitemtrackingClient) CreateTemplate(arg0 context.Context, arg1 workitemtracking.CreateTemplateArgs) (*workitemtracking.WorkItemTemplate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTemplate", arg0, arg1)
	ret0, _ := ret[0].(*workitemtracking.WorkItemTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTemplate indicates an expected call of CreateTemplate
func (mr *MockWorkitemtrackingClientMockRecorder) CreateTemplate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTemplate", reflect.TypeOf((*MockWorkitemtrackingClient)(nil).CreateTemplate), arg0, arg1)
}

// CreateWorkItem mocks base method
func (m *MockWorkitemtrackingClient) CreateWorkItem(arg0 context.Context, arg1 workitemtracking.CreateWorkItemArgs) (*workitemtracking.WorkItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWorkItem", arg0, arg1)
	ret0, _ := ret[0].(*workitemtracking.WorkItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWorkItem indicates an expected call of CreateWorkItem
func (mr *MockWorkitemtrackingClientMockRecorder) CreateWorkItem(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkItem", reflect.TypeOf((*MockWorkitemtrackingClient)(nil).CreateWorkItem), arg0, arg1)
}

// DeleteClassificationNode mocks base method
func (m *MockWorkitemtrackingClient) DeleteClassificationNode(arg0 context.Context, arg1 workitemtracking.DeleteClassificationNodeArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClassificationNode", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClassificationNode indicates an expected call of DeleteClassificationNode
func (mr *MockWorkitemtrackingClientMockRecorder) DeleteClassificationNode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClassificationNode", reflect.TypeOf((*MockWorkitemtrackingClient)(nil).DeleteClassificationNode), arg0, arg1)
}

// DeleteComment mocks base method
func (m *MockWorkitemtrackingClient) DeleteComment(arg0 context.Context, arg1 workitemtracking.DeleteCommentArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteComment", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteComment indicates an expected call of DeleteComment
func (mr *MockWorkitemtrackingClientMockRecorder) DeleteComment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComment", reflect.TypeOf((*MockWorkitemtrackingClient)(nil).DeleteComment), arg0, arg1)
}

// DeleteCommentReaction mocks base method
func (m *MockWorkitemtrackingClient) DeleteCommentReaction(arg0 context.Context, arg1 workitemtracking.DeleteCommentReactionArgs) (*workitemtracking.CommentReaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCommentReaction", arg0, arg1)
	ret0, _ := ret[0].(*workitemtracking.CommentReaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCommentReaction indicates an expected call of DeleteCommentReaction
func (mr *MockWorkitemtrackingClientMockRecorder) DeleteCommentReaction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCommentReaction", reflect.TypeOf((*MockWorkitemtrackingClient)(nil).DeleteCommentReaction), arg0, arg1)
}

// DeleteField mocks base method
func (m *MockWorkitemtrackingClient) DeleteField(arg0 context.Context, arg1 workitemtracking.DeleteFieldArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteField", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteField indicates an expected call of DeleteField
func (mr *MockWorkitemtrackingClientMockRecorder) DeleteField(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteField", reflect.TypeOf((*MockWorkitemtrackingClient)(nil).DeleteField), arg0, arg1)
}

// DeleteQuery mocks base method
func (m *MockWorkitemtrackingClient) DeleteQuery(arg0 context.Context, arg1 workitemtracking.DeleteQueryArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteQuery", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteQuery indicates an expected call of DeleteQuery
func (mr *MockWorkitemtrackingClientMockRecorder) DeleteQuery(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteQuery", reflect.TypeOf((*MockWorkitemtrackingClient)(nil).DeleteQuery), arg0, arg1)
}

// DeleteTemplate mocks base method
func (m *MockWorkitemtrackingClient) DeleteTemplate(arg0 context.Context, arg1 workitemtracking.DeleteTemplateArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTemplate", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTemplate indicates an expected call of DeleteTemplate
func (mr *MockWorkitemtrackingClientMockRecorder) DeleteTemplate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTemplate", reflect.TypeOf((*MockWorkitemtrackingClient)(nil).DeleteTemplate), arg0, arg1)
}

// DeleteWorkItem mocks base method
func (m *MockWorkitemtrackingClient) DeleteWorkItem(arg0 context.Context, arg1 workitemtracking.DeleteWorkItemArgs) (*workitemtracking.WorkItemDelete, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWorkItem", arg0, arg1)
	ret0, _ := ret[0].(*workitemtracking.WorkItemDelete)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteWorkItem indicates an expected call of DeleteWorkItem
func (mr *MockWorkitemtrackingClientMockRecorder) DeleteWorkItem(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorkItem", reflect.TypeOf((*MockWorkitemtrackingClient)(nil).DeleteWorkItem), arg0, arg1)
}

// DestroyWorkItem mocks base method
func (m *MockWorkitemtrackingClient) DestroyWorkItem(arg0 context.Context, arg1 workitemtracking.DestroyWorkItemArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DestroyWorkItem", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DestroyWorkItem indicates an expected call of DestroyWorkItem
func (mr *MockWorkitemtrackingClientMockRecorder) DestroyWorkItem(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DestroyWorkItem", reflect.TypeOf((*MockWorkitemtrackingClient)(nil).DestroyWorkItem), arg0, arg1)
}

// GetAttachmentContent mocks base method
func (m *MockWorkitemtrackingClient) GetAttachmentContent(arg0 context.Context, arg1 workitemtracking.GetAttachmentContentArgs) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAttachmentContent", arg0, arg1)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAttachmentContent indicates an expected call of GetAttachmentContent
func (mr *MockWorkitemtrackingClientMockRecorder) GetAttachmentContent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAttachmentContent", reflect.TypeOf((*MockWorkitemtrackingClient)(nil).GetAttachmentContent), arg0, arg1)
}

// GetAttachmentZip mocks base method
func (m *MockWorkitemtrackingClient) GetAttachmentZip(arg0 context.Context, arg1 workitemtracking.GetAttachmentZipArgs) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAttachmentZip", arg0, arg1)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAttachmentZip indicates an expected call of GetAttachmentZip
func (mr *MockWorkitemtrackingClientMockRecorder) GetAttachmentZip(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAttachmentZip", reflect.TypeOf((*MockWorkitemtrackingClient)(nil).GetAttachmentZip), arg0, arg1)
}

// GetClassificationNode mocks base method
func (m *MockWorkitemtrackingClient) GetClassificationNode(arg0 context.Context, arg1 workitemtracking.GetClassificationNodeArgs) (*workitemtracking.WorkItemClassificationNode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClassificationNode", arg0, arg1)
	ret0, _ := ret[0].(*workitemtracking.WorkItemClassificationNode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClassificationNode indicates an expected call of GetClassificationNode
func (mr *MockWorkitemtrackingClientMockRecorder) GetClassificationNode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClassificationNode", reflect.TypeOf((*MockWorkitemtrackingClient)(nil).GetClassificationNode), arg0, arg1)
}

// GetClassificationNodes mocks base method
func (m *MockWorkitemtrackingClient) GetClassificationNodes(arg0 context.Context, arg1 workitemtracking.GetClassificationNodesArgs) (*[]workitemtracking.WorkItemClassificationNode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClassificationNodes", arg0, arg1)
	ret0, _ := ret[0].(*[]workitemtracking.WorkItemClassificationNode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClassificationNodes indicates an expected call of GetClassificationNodes
func (mr *MockWorkitemtrackingClientMockRecorder) GetClassificationNodes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClassificationNodes", reflect.TypeOf((*MockWorkitemtrackingClient)(nil).GetClassificationNodes), arg0, arg1)
}

// GetComment mocks base method
func (m *MockWorkitemtrackingClient) GetComment(arg0 context.Context, arg1 workitemtracking.GetCommentArgs) (*workitemtracking.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComment", arg0, arg1)
	ret0, _ := ret[0].(*workitemtracking.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComment indicates an expected call of GetComment
func (mr *MockWorkitemtrackingClientMockRecorder) GetComment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComment", reflect.TypeOf((*MockWorkitemtrackingClient)(nil).GetComment), arg0, arg1)
}

// GetCommentReactions mocks base method
func (m *MockWorkitemtrackingClient) GetCommentReactions(arg0 context.Context, arg1 workitemtracking.GetCommentReactionsArgs) (*[]workitemtracking.CommentReaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommentReactions", arg0, arg1)
	ret0, _ := ret[0].(*[]workitemtracking.CommentReaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommentReactions indicates an expected call of GetCommentReactions
func (mr *MockWorkitemtrackingClientMockRecorder) GetCommentReactions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentReactions", reflect.TypeOf((*MockWorkitemtrackingClient)(nil).GetCommentReactions), arg0, arg1)
}

// GetCommentVersion mocks base method
func (m *MockWorkitemtrackingClient) GetCommentVersion(arg0 context.Context, arg1 workitemtracking.GetCommentVersionArgs) (*workitemtracking.CommentVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommentVersion", arg0, arg1)
	ret0, _ := ret[0].(*workitemtracking.CommentVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommentVersion indicates an expected call of GetCommentVersion
func (mr *MockWorkitemtrackingClientMockRecorder) GetCommentVersion(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentVersion", reflect.TypeOf((*MockWorkitemtrackingClient)(nil).GetCommentVersion), arg0, arg1)
}

// GetCommentVersions mocks base method
func (m *MockWorkitemtrackingClient) GetCommentVersions(arg0 context.Context, arg1 workitemtracking.GetCommentVersionsArgs) (*[]workitemtracking.CommentVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommentVersions", arg0, arg1)
	ret0, _ := ret[0].(*[]workitemtracking.CommentVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommentVersions indicates an expected call of GetCommentVersions
func (mr *MockWorkitemtrackingClientMockRecorder) GetCommentVersions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentVersions", reflect.TypeOf((*MockWorkitemtrackingClient)(nil).GetCommentVersions), arg0, arg1)
}

// GetComments mocks base method
func (m *MockWorkitemtrackingClient) GetComments(arg0 context.Context, arg1 workitemtracking.GetCommentsArgs) (*workitemtracking.CommentList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComments", arg0, arg1)
	ret0, _ := ret[0].(*workitemtracking.CommentList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComments indicates an expected call of GetComments
func (mr *MockWorkitemtrackingClientMockRecorder) GetComments(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComments", reflect.TypeOf((*MockWorkitemtrackingClient)(nil).GetComments), arg0, arg1)
}

// GetCommentsBatch mocks base method
func (m *MockWorkitemtrackingClient) GetCommentsBatch(arg0 context.Context, arg1 workitemtracking.GetCommentsBatchArgs) (*workitemtracking.CommentList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommentsBatch", arg0, arg1)
	ret0, _ := ret[0].(*workitemtracking.CommentList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommentsBatch indicates an expected call of GetCommentsBatch
func (mr *MockWorkitemtrackingClientMockRecorder) GetCommentsBatch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentsBatch", reflect.TypeOf((*MockWorkitemtrackingClient)(nil).GetCommentsBatch), arg0, arg1)
}

// GetDeletedWorkItem mocks base method
func (m *MockWorkitemtrackingClient) GetDeletedWorkItem(arg0 context.Context, arg1 workitemtracking.GetDeletedWorkItemArgs) (*workitemtracking.WorkItemDelete, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeletedWorkItem", arg0, arg1)
	ret0, _ := ret[0].(*workitemtracking.WorkItemDelete)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeletedWorkItem indicates an expected call of GetDeletedWorkItem
func (mr *MockWorkitemtrackingClientMockRecorder) GetDeletedWorkItem(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeletedWorkItem", reflect.TypeOf((*MockWorkitemtrackingClient)(nil).GetDeletedWorkItem), arg0, arg1)
}

// GetDeletedWorkItemShallowReferences mocks base method
func (m *MockWorkitemtrackingClient) GetDeletedWorkItemShallowReferences(arg0 context.Context, arg1 workitemtracking.GetDeletedWorkItemShallowReferencesArgs) (*[]workitemtracking.WorkItemDeleteShallowReference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeletedWorkItemShallowReferences", arg0, arg1)
	ret0, _ := ret[0].(*[]workitemtracking.WorkItemDeleteShallowReference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeletedWorkItemShallowReferences indicates an expected call of GetDeletedWorkItemShallowReferences
func (mr *MockWorkitemtrackingClientMockRecorder) GetDeletedWorkItemShallowReferences(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeletedWorkItemShallowReferences", reflect.TypeOf((*MockWorkitemtrackingClient)(nil).GetDeletedWorkItemShallowReferences), arg0, arg1)
}

// GetDeletedWorkItems mocks base method
func (m *MockWorkitemtrackingClient) GetDeletedWorkItems(arg0 context.Context, arg1 workitemtracking.GetDeletedWorkItemsArgs) (*[]workitemtracking.WorkItemDeleteReference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeletedWorkItems", arg0, arg1)
	ret0, _ := ret[0].(*[]workitemtracking.WorkItemDeleteReference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeletedWorkItems indicates an expected call of GetDeletedWorkItems
func (mr *MockWorkitemtrackingClientMockRecorder) GetDeletedWorkItems(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeletedWorkItems", reflect.TypeOf((*MockWorkitemtrackingClient)(nil).GetDeletedWorkItems), arg0, arg1)
}

// GetEngagedUsers mocks base method
func (m *MockWorkitemtrackingClient) GetEngagedUsers(arg0 context.Context, arg1 workitemtracking.GetEngagedUsersArgs) (*[]webapi.IdentityRef, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEngagedUsers", arg0, arg1)
	ret0, _ := ret[0].(*[]webapi.IdentityRef)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEngagedUsers indicates an expected call of GetEngagedUsers
func (mr *MockWorkitemtrackingClientMockRecorder) GetEngagedUsers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEngagedUsers", reflect.TypeOf((*MockWorkitemtrackingClient)(nil).GetEngagedUsers), arg0, arg1)
}

// GetField mocks base method
func (m *MockWorkitemtrackingClient) GetField(arg0 context.Context, arg1 workitemtracking.GetFieldArgs) (*workitemtracking.WorkItemField, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetField", arg0, arg1)
	ret0, _ := ret[0].(*workitemtracking.WorkItemField)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetField indicates an expected call of GetField
func (mr *MockWorkitemtrackingClientMockRecorder) GetField(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetField", reflect.TypeOf((*MockWorkitemtrackingClient)(nil).GetField), arg0, arg1)
}

// GetFields mocks base method
func (m *MockWorkitemtrackingClient) GetFields(arg0 context.Context, arg1 workitemtracking.GetFieldsArgs) (*[]workitemtracking.WorkItemField, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFields", arg0, arg1)
	ret0, _ := ret[0].(*[]workitemtracking.WorkItemField)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFields indicates an expected call of GetFields
func (mr *MockWorkitemtrackingClientMockRecorder) GetFields(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFields", reflect.TypeOf((*MockWorkitemtrackingClient)(nil).GetFields), arg0, arg1)
}

// GetQueries mocks base method
func (m *MockWorkitemtrackingClient) GetQueries(arg0 context.Context, arg1 workitemtracking.GetQueriesArgs) (*[]workitemtracking.QueryHierarchyItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQueries", arg0, arg1)
	ret0, _ := ret[0].(*[]workitemtracking.QueryHierarchyItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQueries indicates an expected call of GetQueries
func (mr *MockWorkitemtrackingClientMockRecorder) GetQueries(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQueries", reflect.TypeOf((*MockWorkitemtrackingClient)(nil).GetQueries), arg0, arg1)
}

// GetQueriesBatch mocks base method
func (m *MockWorkitemtrackingClient) GetQueriesBatch(arg0 context.Context, arg1 workitemtracking.GetQueriesBatchArgs) (*[]workitemtracking.QueryHierarchyItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQueriesBatch", arg0, arg1)
	ret0, _ := ret[0].(*[]workitemtracking.QueryHierarchyItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQueriesBatch indicates an expected call of GetQueriesBatch
func (mr *MockWorkitemtrackingClientMockRecorder) GetQueriesBatch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQueriesBatch", reflect.TypeOf((*MockWorkitemtrackingClient)(nil).GetQueriesBatch), arg0, arg1)
}

// GetQuery mocks base method
func (m *MockWorkitemtrackingClient) GetQuery(arg0 context.Context, arg1 workitemtracking.GetQueryArgs) (*workitemtracking.QueryHierarchyItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuery", arg0, arg1)
	ret0, _ := ret[0].(*workitemtracking.QueryHierarchyItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuery indicates an expected call of GetQuery
func (mr *MockWorkitemtrackingClientMockRecorder) GetQuery(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuery", reflect.TypeOf((*MockWorkitemtrackingClient)(nil).GetQuery), arg0, arg1)
}

// GetQueryResultCount mocks base method
func (m *MockWorkitemtrackingClient) GetQueryResultCount(arg0 context.Context, arg1 workitemtracking.GetQueryResultCountArgs) (*int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQueryResultCount", arg0, arg1)
	ret0, _ := ret[0].(*int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQueryResultCount indicates an expected call of GetQueryResultCount
func (mr *MockWorkitemtrackingClientMockRecorder) GetQueryResultCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQueryResultCount", reflect.TypeOf((*MockWorkitemtrackingClient)(nil).GetQueryResultCount), arg0, arg1)
}

// GetRecentActivityData mocks base method
func (m *MockWorkitemtrackingClient) GetRecentActivityData(arg0 context.Context, arg1 workitemtracking.GetRecentActivityDataArgs) (*[]workitemtracking.AccountRecentActivityWorkItemModel2, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecentActivityData", arg0, arg1)
	ret0, _ := ret[0].(*[]workitemtracking.AccountRecentActivityWorkItemModel2)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecentActivityData indicates an expected call of GetRecentActivityData
func (mr *MockWorkitemtrackingClientMockRecorder) GetRecentActivityData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecentActivityData", reflect.TypeOf((*MockWorkitemtrackingClient)(nil).GetRecentActivityData), arg0, arg1)
}

// GetRelationType mocks base method
func (m *MockWorkitemtrackingClient) GetRelationType(arg0 context.Context, arg1 workitemtracking.GetRelationTypeArgs) (*workitemtracking.WorkItemRelationType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRelationType", arg0, arg1)
	ret0, _ := ret[0].(*workitemtracking.WorkItemRelationType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelationType indicates an expected call of GetRelationType
func (mr *MockWorkitemtrackingClientMockRecorder) GetRelationType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelationType", reflect.TypeOf((*MockWorkitemtrackingClient)(nil).GetRelationType), arg0, arg1)
}

// GetRelationTypes mocks base method
func (m *MockWorkitemtrackingClient) GetRelationTypes(arg0 context.Context, arg1 workitemtracking.GetRelationTypesArgs) (*[]workitemtracking.WorkItemRelationType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRelationTypes", arg0, arg1)
	ret0, _ := ret[0].(*[]workitemtracking.WorkItemRelationType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelationTypes indicates an expected call of GetRelationTypes
func (mr *MockWorkitemtrackingClientMockRecorder) GetRelationTypes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelationTypes", reflect.TypeOf((*MockWorkitemtrackingClient)(nil).GetRelationTypes), arg0, arg1)
}

// GetReportingLinksByLinkType mocks base method
func (m *MockWorkitemtrackingClient) GetReportingLinksByLinkType(arg0 context.Context, arg1 workitemtracking.GetReportingLinksByLinkTypeArgs) (*workitemtracking.ReportingWorkItemLinksBatch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReportingLinksByLinkType", arg0, arg1)
	ret0, _ := ret[0].(*workitemtracking.ReportingWorkItemLinksBatch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReportingLinksByLinkType indicates an expected call of GetReportingLinksByLinkType
func (mr *MockWorkitemtrackingClientMockRecorder) GetReportingLinksByLinkType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReportingLinksByLinkType", reflect.TypeOf((*MockWorkitemtrackingClient)(nil).GetReportingLinksByLinkType), arg0, arg1)
}

// GetRevision mocks base method
func (m *MockWorkitemtrackingClient) GetRevision(arg0 context.Context, arg1 workitemtracking.GetRevisionArgs) (*workitemtracking.WorkItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRevision", arg0, arg1)
	ret0, _ := ret[0].(*workitemtracking.WorkItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRevision indicates an expected call of GetRevision
func (mr *MockWorkitemtrackingClientMockRecorder) GetRevision(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRevision", reflect.TypeOf((*MockWorkitemtrackingClient)(nil).GetRevision), arg0, arg1)
}

// GetRevisions mocks base method
func (m *MockWorkitemtrackingClient) GetRevisions(arg0 context.Context, arg1 workitemtracking.GetRevisionsArgs) (*[]workitemtracking.WorkItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRevisions", arg0, arg1)
	ret0, _ := ret[0].(*[]workitemtracking.WorkItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRevisions indicates an expected call of GetRevisions
func (mr *MockWorkitemtrackingClientMockRecorder) GetRevisions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRevisions", reflect.TypeOf((*MockWorkitemtrackingClient)(nil).GetRevisions), arg0, arg1)
}

// GetRootNodes mocks base method
func (m *MockWorkitemtrackingClient) GetRootNodes(arg0 context.Context, arg1 workitemtracking.GetRootNodesArgs) (*[]workitemtracking.WorkItemClassificationNode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRootNodes", arg0, arg1)
	ret0, _ := ret[0].(*[]workitemtracking.WorkItemClassificationNode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRootNodes indicates an expected call of GetRootNodes
func (mr *MockWorkitemtrackingClientMockRecorder) GetRootNodes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRootNodes", reflect.TypeOf((*MockWorkitemtrackingClient)(nil).GetRootNodes), arg0, arg1)
}

// GetTemplate mocks base method
func (m *MockWorkitemtrackingClient) GetTemplate(arg0 context.Context, arg1 workitemtracking.GetTemplateArgs) (*workitemtracking.WorkItemTemplate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTemplate", arg0, arg1)
	ret0, _ := ret[0].(*workitemtracking.WorkItemTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTemplate indicates an expected call of GetTemplate
func (mr *MockWorkitemtrackingClientMockRecorder) GetTemplate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTemplate", reflect.TypeOf((*MockWorkitemtrackingClient)(nil).GetTemplate), arg0, arg1)
}

// GetTemplates mocks base method
func (m *MockWorkitemtrackingClient) GetTemplates(arg0 context.Context, arg1 workitemtracking.GetTemplatesArgs) (*[]workitemtracking.WorkItemTemplateReference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTemplates", arg0, arg1)
	ret0, _ := ret[0].(*[]workitemtracking.WorkItemTemplateReference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTemplates indicates an expected call of GetTemplates
func (mr *MockWorkitemtrackingClientMockRecorder) GetTemplates(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTemplates", reflect.TypeOf((*MockWorkitemtrackingClient)(nil).GetTemplates), arg0, arg1)
}

// GetUpdate mocks base method
func (m *MockWorkitemtrackingClient) GetUpdate(arg0 context.Context, arg1 workitemtracking.GetUpdateArgs) (*workitemtracking.WorkItemUpdate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUpdate", arg0, arg1)
	ret0, _ := ret[0].(*workitemtracking.WorkItemUpdate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUpdate indicates an expected call of GetUpdate
func (mr *MockWorkitemtrackingClientMockRecorder) GetUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUpdate", reflect.TypeOf((*MockWorkitemtrackingClient)(nil).GetUpdate), arg0, arg1)
}

// GetUpdates mocks base method
func (m *MockWorkitemtrackingClient) GetUpdates(arg0 context.Context, arg1 workitemtracking.GetUpdatesArgs) (*[]workitemtracking.WorkItemUpdate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUpdates", arg0, arg1)
	ret0, _ := ret[0].(*[]workitemtracking.WorkItemUpdate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUpdates indicates an expected call of GetUpdates
func (mr *MockWorkitemtrackingClientMockRecorder) GetUpdates(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUpdates", reflect.TypeOf((*MockWorkitemtrackingClient)(nil).GetUpdates), arg0, arg1)
}

// GetWorkArtifactLinkTypes mocks base method
func (m *MockWorkitemtrackingClient) GetWorkArtifactLinkTypes(arg0 context.Context, arg1 workitemtracking.GetWorkArtifactLinkTypesArgs) (*[]workitemtracking.WorkArtifactLink, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkArtifactLinkTypes", arg0, arg1)
	ret0, _ := ret[0].(*[]workitemtracking.WorkArtifactLink)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkArtifactLinkTypes indicates an expected call of GetWorkArtifactLinkTypes
func (mr *MockWorkitemtrackingClientMockRecorder) GetWorkArtifactLinkTypes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkArtifactLinkTypes", reflect.TypeOf((*MockWorkitemtrackingClient)(nil).GetWorkArtifactLinkTypes), arg0, arg1)
}

// GetWorkItem mocks base method
func (m *MockWorkitemtrackingClient) GetWorkItem(arg0 context.Context, arg1 workitemtracking.GetWorkItemArgs) (*workitemtracking.WorkItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkItem", arg0, arg1)
	ret0, _ := ret[0].(*workitemtracking.WorkItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkItem indicates an expected call of GetWorkItem
func (mr *MockWorkitemtrackingClientMockRecorder) GetWorkItem(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkItem", reflect.TypeOf((*MockWorkitemtrackingClient)(nil).GetWorkItem), arg0, arg1)
}

// GetWorkItemIconJson mocks base method
func (m *MockWorkitemtrackingClient) GetWorkItemIconJson(arg0 context.Context, arg1 workitemtracking.GetWorkItemIconJsonArgs) (*workitemtracking.WorkItemIcon, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkItemIconJson", arg0, arg1)
	ret0, _ := ret[0].(*workitemtracking.WorkItemIcon)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkItemIconJson indicates an expected call of GetWorkItemIconJson
func (mr *MockWorkitemtrackingClientMockRecorder) GetWorkItemIconJson(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkItemIconJson", reflect.TypeOf((*MockWorkitemtrackingClient)(nil).GetWorkItemIconJson), arg0, arg1)
}

// GetWorkItemIconSvg mocks base method
func (m *MockWorkitemtrackingClient) GetWorkItemIconSvg(arg0 context.Context, arg1 workitemtracking.GetWorkItemIconSvgArgs) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkItemIconSvg", arg0, arg1)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkItemIconSvg indicates an expected call of GetWorkItemIconSvg
func (mr *MockWorkitemtrackingClientMockRecorder) GetWorkItemIconSvg(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkItemIconSvg", reflect.TypeOf((*MockWorkitemtrackingClient)(nil).GetWorkItemIconSvg), arg0, arg1)
}

// GetWorkItemIconXaml mocks base method
func (m *MockWorkitemtrackingClient) GetWorkItemIconXaml(arg0 context.Context, arg1 workitemtracking.GetWorkItemIconXamlArgs) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkItemIconXaml", arg0, arg1)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkItemIconXaml indicates an expected call of GetWorkItemIconXaml
func (mr *MockWorkitemtrackingClientMockRecorder) GetWorkItemIconXaml(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkItemIconXaml", reflect.TypeOf((*MockWorkitemtrackingClient)(nil).GetWorkItemIconXaml), arg0, arg1)
}

// GetWorkItemIcons mocks base method
func (m *MockWorkitemtrackingClient) GetWorkItemIcons(arg0 context.Context, arg1 workitemtracking.GetWorkItemIconsArgs) (*[]workitemtracking.WorkItemIcon, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkItemIcons", arg0, arg1)
	ret0, _ := ret[0].(*[]workitemtracking.WorkItemIcon)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkItemIcons indicates an expected call of GetWorkItemIcons
func (mr *MockWorkitemtrackingClientMockRecorder) GetWorkItemIcons(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkItemIcons", reflect.TypeOf((*MockWorkitemtrackingClient)(nil).GetWorkItemIcons), arg0, arg1)
}

// GetWorkItemNextStatesOnCheckinAction mocks base method
func (m *MockWorkitemtrackingClient) GetWorkItemNextStatesOnCheckinAction(arg0 context.Context, arg1 workitemtracking.GetWorkItemNextStatesOnCheckinActionArgs) (*[]workitemtracking.WorkItemNextStateOnTransition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkItemNextStatesOnCheckinAction", arg0, arg1)
	ret0, _ := ret[0].(*[]workitemtracking.WorkItemNextStateOnTransition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkItemNextStatesOnCheckinAction indicates an expected call of GetWorkItemNextStatesOnCheckinAction
func (mr *MockWorkitemtrackingClientMockRecorder) GetWorkItemNextStatesOnCheckinAction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkItemNextStatesOnCheckinAction", reflect.TypeOf((*MockWorkitemtrackingClient)(nil).GetWorkItemNextStatesOnCheckinAction), arg0, arg1)
}

// GetWorkItemTemplate mocks base method
func (m *MockWorkitemtrackingClient) GetWorkItemTemplate(arg0 context.Context, arg1 workitemtracking.GetWorkItemTemplateArgs) (*workitemtracking.WorkItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkItemTemplate", arg0, arg1)
	ret0, _ := ret[0].(*workitemtracking.WorkItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkItemTemplate indicates an expected call of GetWorkItemTemplate
func (mr *MockWorkitemtrackingClientMockRecorder) GetWorkItemTemplate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkItemTemplate", reflect.TypeOf((*MockWorkitemtrackingClient)(nil).GetWorkItemTemplate), arg0, arg1)
}

// GetWorkItemType mocks base method
func (m *MockWorkitemtrackingClient) GetWorkItemType(arg0 context.Context, arg1 workitemtracking.GetWorkItemTypeArgs) (*workitemtracking.WorkItemType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkItemType", arg0, arg1)
	ret0, _ := ret[0].(*workitemtracking.WorkItemType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkItemType indicates an expected call of GetWorkItemType
func (mr *MockWorkitemtrackingClientMockRecorder) GetWorkItemType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkItemType", reflect.TypeOf((*MockWorkitemtrackingClient)(nil).GetWorkItemType), arg0, arg1)
}

// GetWorkItemTypeCategories mocks base method
func (m *MockWorkitemtrackingClient) GetWorkItemTypeCategories(arg0 context.Context, arg1 workitemtracking.GetWorkItemTypeCategoriesArgs) (*[]workitemtracking.WorkItemTypeCategory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkItemTypeCategories", arg0, arg1)
	ret0, _ := ret[0].(*[]workitemtracking.WorkItemTypeCategory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkItemTypeCategories indicates an expected call of GetWorkItemTypeCategories
func (mr *MockWorkitemtrackingClientMockRecorder) GetWorkItemTypeCategories(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkItemTypeCategories", reflect.TypeOf((*MockWorkitemtrackingClient)(nil).GetWorkItemTypeCategories), arg0, arg1)
}

// GetWorkItemTypeCategory mocks base method
func (m *MockWorkitemtrackingClient) GetWorkItemTypeCategory(arg0 context.Context, arg1 workitemtracking.GetWorkItemTypeCategoryArgs) (*workitemtracking.WorkItemTypeCategory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkItemTypeCategory", arg0, arg1)
	ret0, _ := ret[0].(*workitemtracking.WorkItemTypeCategory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkItemTypeCategory indicates an expected call of GetWorkItemTypeCategory
func (mr *MockWorkitemtrackingClientMockRecorder) GetWorkItemTypeCategory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkItemTypeCategory", reflect.TypeOf((*MockWorkitemtrackingClient)(nil).GetWorkItemTypeCategory), arg0, arg1)
}

// GetWorkItemTypeFieldWithReferences mocks base method
func (m *MockWorkitemtrackingClient) GetWorkItemTypeFieldWithReferences(arg0 context.Context, arg1 workitemtracking.GetWorkItemTypeFieldWithReferencesArgs) (*workitemtracking.WorkItemTypeFieldWithReferences, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkItemTypeFieldWithReferences", arg0, arg1)
	ret0, _ := ret[0].(*workitemtracking.WorkItemTypeFieldWithReferences)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkItemTypeFieldWithReferences indicates an expected call of GetWorkItemTypeFieldWithReferences
func (mr *MockWorkitemtrackingClientMockRecorder) GetWorkItemTypeFieldWithReferences(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkItemTypeFieldWithReferences", reflect.TypeOf((*MockWorkitemtrackingClient)(nil).GetWorkItemTypeFieldWithReferences), arg0, arg1)
}

// GetWorkItemTypeFieldsWithReferences mocks base method
func (m *MockWorkitemtrackingClient) GetWorkItemTypeFieldsWithReferences(arg0 context.Context, arg1 workitemtracking.GetWorkItemTypeFieldsWithReferencesArgs) (*[]workitemtracking.WorkItemTypeFieldWithReferences, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkItemTypeFieldsWithReferences", arg0, arg1)
	ret0, _ := ret[0].(*[]workitemtracking.WorkItemTypeFieldWithReferences)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkItemTypeFieldsWithReferences indicates an expected call of GetWorkItemTypeFieldsWithReferences
func (mr *MockWorkitemtrackingClientMockRecorder) GetWorkItemTypeFieldsWithReferences(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkItemTypeFieldsWithReferences", reflect.TypeOf((*MockWorkitemtrackingClient)(nil).GetWorkItemTypeFieldsWithReferences), arg0, arg1)
}

// GetWorkItemTypeStates mocks base method
func (m *MockWorkitemtrackingClient) GetWorkItemTypeStates(arg0 context.Context, arg1 workitemtracking.GetWorkItemTypeStatesArgs) (*[]workitemtracking.WorkItemStateColor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkItemTypeStates", arg0, arg1)
	ret0, _ := ret[0].(*[]workitemtracking.WorkItemStateColor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkItemTypeStates indicates an expected call of GetWorkItemTypeStates
func (mr *MockWorkitemtrackingClientMockRecorder) GetWorkItemTypeStates(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkItemTypeStates", reflect.TypeOf((*MockWorkitemtrackingClient)(nil).GetWorkItemTypeStates), arg0, arg1)
}

// GetWorkItemTypes mocks base method
func (m *MockWorkitemtrackingClient) GetWorkItemTypes(arg0 context.Context, arg1 workitemtracking.GetWorkItemTypesArgs) (*[]workitemtracking.WorkItemType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkItemTypes", arg0, arg1)
	ret0, _ := ret[0].(*[]workitemtracking.WorkItemType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkItemTypes indicates an expected call of GetWorkItemTypes
func (mr *MockWorkitemtrackingClientMockRecorder) GetWorkItemTypes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkItemTypes", reflect.TypeOf((*MockWorkitemtrackingClient)(nil).GetWorkItemTypes), arg0, arg1)
}

// GetWorkItems mocks base method
func (m *MockWorkitemtrackingClient) GetWorkItems(arg0 context.Context, arg1 workitemtracking.GetWorkItemsArgs) (*[]workitemtracking.WorkItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkItems", arg0, arg1)
	ret0, _ := ret[0].(*[]workitemtracking.WorkItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkItems indicates an expected call of GetWorkItems
func (mr *MockWorkitemtrackingClientMockRecorder) GetWorkItems(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkItems", reflect.TypeOf((*MockWorkitemtrackingClient)(nil).GetWorkItems), arg0, arg1)
}

// GetWorkItemsBatch mocks base method
func (m *MockWorkitemtrackingClient) GetWorkItemsBatch(arg0 context.Context, arg1 workitemtracking.GetWorkItemsBatchArgs) (*[]workitemtracking.WorkItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkItemsBatch", arg0, arg1)
	ret0, _ := ret[0].(*[]workitemtracking.WorkItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkItemsBatch indicates an expected call of GetWorkItemsBatch
func (mr *MockWorkitemtrackingClientMockRecorder) GetWorkItemsBatch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkItemsBatch", reflect.TypeOf((*MockWorkitemtrackingClient)(nil).GetWorkItemsBatch), arg0, arg1)
}

// QueryById mocks base method
func (m *MockWorkitemtrackingClient) QueryById(arg0 context.Context, arg1 workitemtracking.QueryByIdArgs) (*workitemtracking.WorkItemQueryResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryById", arg0, arg1)
	ret0, _ := ret[0].(*workitemtracking.WorkItemQueryResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryById indicates an expected call of QueryById
func (mr *MockWorkitemtrackingClientMockRecorder) QueryById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryById", reflect.TypeOf((*MockWorkitemtrackingClient)(nil).QueryById), arg0, arg1)
}

// QueryByWiql mocks base method
func (m *MockWorkitemtrackingClient) QueryByWiql(arg0 context.Context, arg1 workitemtracking.QueryByWiqlArgs) (*workitemtracking.WorkItemQueryResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryByWiql", arg0, arg1)
	ret0, _ := ret[0].(*workitemtracking.WorkItemQueryResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryByWiql indicates an expected call of QueryByWiql
func (mr *MockWorkitemtrackingClientMockRecorder) QueryByWiql(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryByWiql", reflect.TypeOf((*MockWorkitemtrackingClient)(nil).QueryByWiql), arg0, arg1)
}

// QueryWorkItemsForArtifactUris mocks base method
func (m *MockWorkitemtrackingClient) QueryWorkItemsForArtifactUris(arg0 context.Context, arg1 workitemtracking.QueryWorkItemsForArtifactUrisArgs) (*workitemtracking.ArtifactUriQueryResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryWorkItemsForArtifactUris", arg0, arg1)
	ret0, _ := ret[0].(*workitemtracking.ArtifactUriQueryResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryWorkItemsForArtifactUris indicates an expected call of QueryWorkItemsForArtifactUris
func (mr *MockWorkitemtrackingClientMockRecorder) QueryWorkItemsForArtifactUris(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryWorkItemsForArtifactUris", reflect.TypeOf((*MockWorkitemtrackingClient)(nil).QueryWorkItemsForArtifactUris), arg0, arg1)
}

// ReadReportingDiscussions mocks base method
func (m *MockWorkitemtrackingClient) ReadReportingDiscussions(arg0 context.Context, arg1 workitemtracking.ReadReportingDiscussionsArgs) (*workitemtracking.ReportingWorkItemRevisionsBatch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadReportingDiscussions", arg0, arg1)
	ret0, _ := ret[0].(*workitemtracking.ReportingWorkItemRevisionsBatch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadReportingDiscussions indicates an expected call of ReadReportingDiscussions
func (mr *MockWorkitemtrackingClientMockRecorder) ReadReportingDiscussions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadReportingDiscussions", reflect.TypeOf((*MockWorkitemtrackingClient)(nil).ReadReportingDiscussions), arg0, arg1)
}

// ReadReportingRevisionsGet mocks base method
func (m *MockWorkitemtrackingClient) ReadReportingRevisionsGet(arg0 context.Context, arg1 workitemtracking.ReadReportingRevisionsGetArgs) (*workitemtracking.ReportingWorkItemRevisionsBatch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadReportingRevisionsGet", arg0, arg1)
	ret0, _ := ret[0].(*workitemtracking.ReportingWorkItemRevisionsBatch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadReportingRevisionsGet indicates an expected call of ReadReportingRevisionsGet
func (mr *MockWorkitemtrackingClientMockRecorder) ReadReportingRevisionsGet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadReportingRevisionsGet", reflect.TypeOf((*MockWorkitemtrackingClient)(nil).ReadReportingRevisionsGet), arg0, arg1)
}

// ReadReportingRevisionsPost mocks base method
func (m *MockWorkitemtrackingClient) ReadReportingRevisionsPost(arg0 context.Context, arg1 workitemtracking.ReadReportingRevisionsPostArgs) (*workitemtracking.ReportingWorkItemRevisionsBatch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadReportingRevisionsPost", arg0, arg1)
	ret0, _ := ret[0].(*workitemtracking.ReportingWorkItemRevisionsBatch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadReportingRevisionsPost indicates an expected call of ReadReportingRevisionsPost
func (mr *MockWorkitemtrackingClientMockRecorder) ReadReportingRevisionsPost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadReportingRevisionsPost", reflect.TypeOf((*MockWorkitemtrackingClient)(nil).ReadReportingRevisionsPost), arg0, arg1)
}

// ReplaceTemplate mocks base method
func (m *MockWorkitemtrackingClient) ReplaceTemplate(arg0 context.Context, arg1 workitemtracking.ReplaceTemplateArgs) (*workitemtracking.WorkItemTemplate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplaceTemplate", arg0, arg1)
	ret0, _ := ret[0].(*workitemtracking.WorkItemTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReplaceTemplate indicates an expected call of ReplaceTemplate
func (mr *MockWorkitemtrackingClientMockRecorder) ReplaceTemplate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplaceTemplate", reflect.TypeOf((*MockWorkitemtrackingClient)(nil).ReplaceTemplate), arg0, arg1)
}

// RestoreWorkItem mocks base method
func (m *MockWorkitemtrackingClient) RestoreWorkItem(arg0 context.Context, arg1 workitemtracking.RestoreWorkItemArgs) (*workitemtracking.WorkItemDelete, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreWorkItem", arg0, arg1)
	ret0, _ := ret[0].(*workitemtracking.WorkItemDelete)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreWorkItem indicates an expected call of RestoreWorkItem
func (mr *MockWorkitemtrackingClientMockRecorder) RestoreWorkItem(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreWorkItem", reflect.TypeOf((*MockWorkitemtrackingClient)(nil).RestoreWorkItem), arg0, arg1)
}

// SearchQueries mocks base method
func (m *MockWorkitemtrackingClient) SearchQueries(arg0 context.Context, arg1 workitemtracking.SearchQueriesArgs) (*workitemtracking.QueryHierarchyItemsResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchQueries", arg0, arg1)
	ret0, _ := ret[0].(*workitemtracking.QueryHierarchyItemsResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchQueries indicates an expected call of SearchQueries
func (mr *MockWorkitemtrackingClientMockRecorder) SearchQueries(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchQueries", reflect.TypeOf((*MockWorkitemtrackingClient)(nil).SearchQueries), arg0, arg1)
}

// UpdateClassificationNode mocks base method
func (m *MockWorkitemtrackingClient) UpdateClassificationNode(arg0 context.Context, arg1 workitemtracking.UpdateClassificationNodeArgs) (*workitemtracking.WorkItemClassificationNode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClassificationNode", arg0, arg1)
	ret0, _ := ret[0].(*workitemtracking.WorkItemClassificationNode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateClassificationNode indicates an expected call of UpdateClassificationNode
func (mr *MockWorkitemtrackingClientMockRecorder) UpdateClassificationNode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClassificationNode", reflect.TypeOf((*MockWorkitemtrackingClient)(nil).UpdateClassificationNode), arg0, arg1)
}

// UpdateComment mocks base method
func (m *MockWorkitemtrackingClient) UpdateComment(arg0 context.Context, arg1 workitemtracking.UpdateCommentArgs) (*workitemtracking.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateComment", arg0, arg1)
	ret0, _ := ret[0].(*workitemtracking.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateComment indicates an expected call of UpdateComment
func (mr *MockWorkitemtrackingClientMockRecorder) UpdateComment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateComment", reflect.TypeOf((*MockWorkitemtrackingClient)(nil).UpdateComment), arg0, arg1)
}

// UpdateQuery mocks base method
func (m *MockWorkitemtrackingClient) UpdateQuery(arg0 context.Context, arg1 workitemtracking.UpdateQueryArgs) (*workitemtracking.QueryHierarchyItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateQuery", arg0, arg1)
	ret0, _ := ret[0].(*workitemtracking.QueryHierarchyItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateQuery indicates an expected call of UpdateQuery
func (mr *MockWorkitemtrackingClientMockRecorder) UpdateQuery(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateQuery", reflect.TypeOf((*MockWorkitemtrackingClient)(nil).UpdateQuery), arg0, arg1)
}

// UpdateWorkItem mocks base method
func (m *MockWorkitemtrackingClient) UpdateWorkItem(arg0 context.Context, arg1 workitemtracking.UpdateWorkItemArgs) (*workitemtracking.WorkItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWorkItem", arg0, arg1)
	ret0, _ := ret[0].(*workitemtracking.WorkItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWorkItem indicates an expected call of UpdateWorkItem
func (mr *MockWorkitemtrackingClientMockRecorder) UpdateWorkItem(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkItem", reflect.TypeOf((*MockWorkitemtrackingClient)(nil).UpdateWorkItem), arg0, arg1)
}
